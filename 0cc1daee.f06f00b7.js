(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{135:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),c=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p({},t,{},e)),n},u=function(e){var t=c(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},f=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||o;return n?r.a.createElement(d,p({ref:t},l,{components:n})):r.a.createElement(d,p({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return l}));var a=n(1),r=(n(0),n(135));const o={title:"Workflow Templates",sidebar_label:"Workflow Templates"},s={id:"reference/workflows/templates",title:"Workflow Templates",description:"## Getting started with Workflow Templates",source:"@site/docs/reference/workflows/templates.md",permalink:"/docs/reference/workflows/templates",editUrl:"https://github.com/onepanelio/core-docs/tree/master/docs/reference/workflows/templates.md",sidebar_label:"Workflow Templates",sidebar:"reference",previous:{title:"Workspace Templates",permalink:"/docs/reference/workspaces/templates"}},p=[{value:"Getting started with Workflow Templates",id:"getting-started-with-workflow-templates",children:[]},{value:"Inputs and outputs",id:"inputs-and-outputs",children:[]}],i={rightToc:p};function l({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},i,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"getting-started-with-workflow-templates"},"Getting started with Workflow Templates"),Object(r.b)("p",null,"You can define reusable templates for Workflows. All Workflow Templates are defined as Directed Acyclic Graphs (DAG), here's an example of how a DAG template is defined:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'# The template to use as entrypoint\nentrypoint: main\ntemplates:\n- name: main            \n  dag:                      # Indicates that this is a DAG template\n    tasks:\n    - name: A               # First task to execute\n      template: echo        # The template to use for first task in DAG\n      arguments:            # Arguments to pass into the "echo" template\n        parameters:\n        - name: message\n          value: A\n    - name: B\n      dependencies: [A]\n      template: echo\n      arguments:\n        parameters:\n        - name: message\n          value: B\n    - name: C\n      dependencies: [A]\n      template: echo\n      arguments:\n        parameters:\n        - name: message\n          value: C\n    - name: D\n      dependencies: [B, C]\n      template: echo\n      arguments:\n        parameters:\n        - name: message\n          value: D\n- name: echo                # Definition of "echo" template used by the nodes in DAG\n  inputs:                   # Name of inputs \n    parameters:\n    - name: message\n  container:\n    image: alpine:3.7\n    command: [echo, "{{inputs.parameters.message}}"]\n')),Object(r.b)("h2",{id:"inputs-and-outputs"},"Inputs and outputs"),Object(r.b)("p",null,"There are two types of inputs and outputs:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Parameters: These are string or number values."),Object(r.b)("li",{parentName:"ul"},"Artifacts: These are paths to actual files or directories stored in the object storage of your choice.")),Object(r.b)("p",null,"You can define inputs and outputs artifacts as follows:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"entrypoint: main\narguments:\n  parameters:\n  - name: model-path\n    value: my-data/output\ntemplates:\n- name: main\n  dag:\n    tasks:\n    - name: input-output\n      template: input-output\n- name: input-output\n  container:\n    args:\n    - |\n      printenv \\\n      && ls /tmp/input \\\n        && mkdir -p /tmp/output \\\n        && echo \"hello\" > /tmp/output/message.txt \\\n        && sleep 15\n    command:\n    - bash\n    - -c\n    image: bash\n  inputs:\n    artifacts:\n    # Download files from S3 prefix random/input into local folder /tmp/input/\n    # # This downloads from the default S3 artifact repository for this namespace\n    - name: input\n      path: /tmp/input/\n      s3:\n        key: my-data/input\n  outputs:\n    artifacts:\n    # Upload files from local /tmp/output folder to S3 prefix random/output\n    # This uploads to the default S3 artifact repository for this namespace\n    - name: message\n      path: /tmp/output\n      s3:\n        key: '{{workflow.parameters.model-path}}'\n\n")))}l.isMDXComponent=!0}}]);